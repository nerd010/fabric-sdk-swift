//
//  identity.pb.swift
//  fabric-sdk-swiftPackageDescription
//
//  Created by Richard on 2017/9/21.
//

import Foundation
import SwiftProtobuf


// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
    typealias Version = _1
}

///   This struct represents an Identity
///   (with its MSP identifier) to be used
///   to serialize it and deserialize it
struct Msp_SerializedIdentity: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "SerializedIdentity"
    static let protoPackageName: String = "msp"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "Mspid"),
        2: .same(proto: "IdBytes"),
        ]
    
    ///   The identifier of the associated membership service provider
    var mspid: String = ""
    
    ///   the Identity, serialized according to the rules of its MPS
    var idBytes: Data = Data()
    
    init() {}
    
    mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
        }
    }
    
    mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &mspid)
        case 2: try decoder.decodeSingularBytesField(value: &idBytes)
        default: break
        }
    }
    
    func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !mspid.isEmpty {
            try visitor.visitSingularStringField(value: mspid, fieldNumber: 1)
        }
        if !idBytes.isEmpty {
            try visitor.visitSingularBytesField(value: idBytes, fieldNumber: 2)
        }
    }
    
    func _protobuf_generated_isEqualTo(other: Msp_SerializedIdentity) -> Bool {
        if mspid != other.mspid {return false}
        if idBytes != other.idBytes {return false}
        return true
    }
}
